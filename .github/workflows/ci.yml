name: CI
on:
  pull_request:
    branches: [main]
concurrency:
  group: ${{ github.head_ref || github.ref_name }}-ci
  cancel-in-progress: true
jobs:
  wasm:
    name: WASM
    runs-on: ubuntu-latest
    steps:
      - name: Determine cache key
        id: cache-key
        run: echo "KEY=${{ hashFiles('image-codec/**') }}" >> "$GITHUB_OUTPUT"
      - name: Lookup WASM
        uses: actions/cache/restore@v4
        id: lookup-wasm
        with:
          path: image-codec/pkg/
          key: ${{ runner.os }}-wasm-${{ steps.cache-key.outputs.key }}
          lookup-only: true
      - name: Setup Rust
        if: steps.lookup-wasm.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Checkout
        if: steps.lookup-wasm.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            Cargo.toml
            Cargo.lock
            render-server
            rust-colors
            image-codec
            palette.json
      - name: Restore Rust cache
        if: steps.lookup-wasm.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Install wasm-pack
        if: steps.lookup-wasm.outputs.cache-hit != 'true'
        run: cargo install wasm-pack
      - name: Build WASM
        if: steps.lookup-wasm.outputs.cache-hit != 'true'
        run: cd image-codec && wasm-pack build --target web
      - name: Upload WASM
        if: steps.lookup-wasm.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: image-codec/pkg/
          key: ${{ runner.os }}-wasm-${{ hashFiles('image-codec/**') }}
  js:
    name: JS
    needs: [wasm]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: "22.18.0"
      - name: Checkout
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            package.json
            package-lock.json
            app
            contracts
            image-codec
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Download WASM
        uses: actions/cache/restore@v4
        with:
          path: /image-codec/pkg
          key: ${{ runner.os }}-image-codec-${{ hashFiles('image-codec/**') }}
      - name: NPM install
        run: npm ci
      - name: Test contracts
        run: cd contracts && npx blueprint build --all && npm test
      - name: Lint app
        run: cd app && npm run lint
  rust:
    name: Rust
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Checkout
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            Cargo.toml
            Cargo.lock
            render-server
            rust-colors
            image-codec
            palette.json
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Install wasm-pack (for caching)
        run: cargo install wasm-pack
      - name: Clippy
        run: cargo clippy --locked
      - name: Rustfmt
        run: cargo fmt --check
